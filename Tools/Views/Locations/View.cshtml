@model Tools.Models.LocationsViewModel

@{
	ViewData["Title"] = "View";

	var apiKey = @Model.ApiKey;

	var allLocs = Model.Locations.ToList();
	var count = allLocs.Count();

	var n = 12;

	var locations = allLocs.Skip(Math.Max(0, allLocs.Count() - n));
}

<div class="text-center pb-4">
	<h1 class="display-4">View</h1>
</div>

<div class="row">
	<div class="col-xl-8 col-lg-8">
		<div class="card mb-3">
			<div class="card-body">
				<div class="d-flex fw-bold small mb-3">
					<span class="flex-grow-1">MAP</span>
				</div>

				<div class="row align-items-center mb-2">
					<div class="col-12">
						<div class="row align-items-center mb-2">
							<div style="height: 500px" class="col-xl-12" id="map"></div>
						</div>
					</div>
				</div>
			</div>

			<div class="card-arrow">
				<div class="card-arrow-top-left"></div>
				<div class="card-arrow-top-right"></div>
				<div class="card-arrow-bottom-left"></div>
				<div class="card-arrow-bottom-right"></div>
			</div>
		</div>
	</div>

	<div class="col-xl-4 col-lg-4">
		<div class="card mb-3">
			<div class="card-body">
				<div class="d-flex fw-bold small mb-3">
					<span class="flex-grow-1">LOCATIONS</span>
				</div>

				<div class="row align-items-center">
					<div class="card-body">
						<table class="table table-striped table-borderless small text-nowrap">
							<thead>
								<tr>
									<td class="col-1">ID</td>
									<td class="col-5">Name</td>
									<td class="col-4">Lat</td>
									<td class="col-4">Long</td>
								</tr>
							</thead>
							<tbody class="table-striped">
								@foreach (var location in locations)
								{
									<tr>
										<td><span class="flex-grow-1">@location.ID</span></td>
										<td><span class="flex-grow-1">@LimitString(location.Name, 40)</span></td>
										<td><span class="flex-grow-1">@LimitDouble(location.Latitude, 9)</span></td>
										<td><span class="flex-grow-1">@LimitDouble(location.Longitude, 9)</span></td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>

			<div class="card-arrow">
				<div class="card-arrow-top-left"></div>
				<div class="card-arrow-top-right"></div>
				<div class="card-arrow-bottom-left"></div>
				<div class="card-arrow-bottom-right"></div>
			</div>
		</div>
	</div>

	@{
		string LimitDouble(double latlng, int limit)
		{
			var latStr = latlng.ToString();
			return LimitString(latStr, limit);
		}

		string LimitString(string str, int limit)
		{
			if (str.Count() >= limit)
				return str.Substring(0, limit) + "...";
			return str;
		}
	}
	
	<div class="col-xl-3 col-lg-3">
		<div class="card mb-3">
			<div class="card-body">
				<div class="d-flex fw-bold small mb-3">
					<span class="flex-grow-1">DATA ENTRY</span>
				</div>

				<div class="row align-items-center">
					<div class="card-body">
						<form asp-controller="Locations" asp-action="Create" method="get">
							<table class="w-100 small mb-0 text-inverse text-opacity-60">
								<tbody class="table-striped">
									<tr>
										<td><label for="Name">Name:</label></td>
										<td><input id="Name" name="Name" type="text" required /></td>
									</tr>

									<tr>
										<td><label for="Latitude">Latitude:</label></td>
										<td><input id="Latitude" name="Latitude" type="number" step="any" required /></td>
									</tr>

									<tr>
										<td><label for="Longitude">Longitude:</label></td>
										<td><input id="Longitude" name="Longitude" type="number" step="any" required /></td>
									</tr>
									<tr>
										<td><p></p></td>
									</tr>
									<tr>
										<td></td>
										<td class=""><button id="addLocation" type="submit">Add Location</button></td>
									</tr>
								</tbody>
							</table>
						</form>
					</div>
				</div>
			</div>

			<div class="card-arrow">
				<div class="card-arrow-top-left"></div>
				<div class="card-arrow-top-right"></div>
				<div class="card-arrow-bottom-left"></div>
				<div class="card-arrow-bottom-right"></div>
			</div>
		</div>
	</div>

	<div class="col-xl-3 col-lg-3">
		<div class="card mb-3">
			<div class="card-body">
				<div class="d-flex fw-bold small mb-3">
					<span class="flex-grow-1">SEARCH FOR LOCATION</span>
				</div>

				<div class="row align-items-center">
					<div class="card-body">
						<form onsubmit="return false;">
							<table class="w-100 small mb-0 text-inverse text-opacity-60">
								<tbody class="table-striped">
									<tr>
										<td><label for="Address">Address:</label></td>
										<td><input id="Address" name="Address" type="text" required /></td>
									</tr>

									<tr>
										<td><label for="autoSubmit">Auto Submit:</label></td>
										<td><input class="AutoSubmit" value="" name="AutoSubmit" type="checkbox" /></td>
									</tr>

									<tr>
										<td><p></p></td>
									</tr>

									<tr>
										<td></td>
										<td class=""><button id="Search" type="button">Search</button></td>
										<td class=""><button id="AddCircle" type="button">Add Circle</button></td>
									</tr>
								</tbody>
							</table>
						</form>
					</div>
				</div>
			</div>

			<div class="card-arrow">
				<div class="card-arrow-top-left"></div>
				<div class="card-arrow-top-right"></div>
				<div class="card-arrow-bottom-left"></div>
				<div class="card-arrow-bottom-right"></div>
			</div>
		</div>
	</div>
</div>

<!-- Google Maps JavaScript API -->
<script src="https://maps.googleapis.com/maps/api/js?key=@apiKey&callback=initMap&libraries=places" async defer></script>
<script src="~/lib/jquery/dist/jquery.js"></script>

<script>
	var map;
	let service;
	let infowindow;

	function initMap() {
		infowindow = new google.maps.InfoWindow();

        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 10,
            center: { lat: 50.8119188, lng: -0.5057848 }
        });

		@*@foreach (var location in Model.Locations)
		{
			<text>
				new google.maps.Marker({
					position: { lat: @location.Latitude, lng: @location.Longitude },
					map: map,
					title: '@location.Name',

					label: {
						color: '#000', fontSize: '12px', fontWeight: '600',
						text: '@location.ID'
					}
				});
			</text>
		}*@
    }

	$(document).ready(function () {
		$("#AddCircle").on("click", function () {
			addCircle();
		});

		$("#Search").on("click", function () {
			search();
		});

		$("#Address").on('keyup', function (event) {
			address();
		});
	});

	function addCircle() {
		console.log("add circle clicked")
		const address = $("#Address");

		const request = {
			query: address.val(),
			fields: ["name", "geometry"],
		};

		service = new google.maps.places.PlacesService(map);
		service.findPlaceFromQuery(request, (results, status) => {
			if (status === google.maps.places.PlacesServiceStatus.OK && results) {
				createCircle(results[0], "#FF0000");
				map.setCenter(results[0].geometry.location);
				address.val("");
			}
		});
	}

	function address() {
		if (event.key === "Enter") {
			$("#Search").trigger("click");
			event.preventDefault();
		}
	}

	function search() {
		const auto = $(".AutoSubmit");

		const address = $("#Address");
			const lat = $("#Latitude");
			const long = $("#Longitude");
			const name = $("#Name");

			lat.val("");
			long.val("");
			name.val("");

			const request = {
				query: address.val(),
				fields: ["name", "geometry"],
			};

			service = new google.maps.places.PlacesService(map);
			service.findPlaceFromQuery(request, (results, status) => {
				if (status === google.maps.places.PlacesServiceStatus.OK && results) {
					for (let i = 0; i < results.length; i++) {
						createMarker(results[i]);
					}

					map.setCenter(results[0].geometry.location);

					lat.val(results[0].geometry.location.lat());
					long.val(results[0].geometry.location.lng());
					
					if (name.val() == "")
						name.val(results[0].name);

					if (auto.is(':checked') && name.val() != "")
						$("#addLocation").click();

					address.val("");
				}
			});
	}

	function createCircle(place, colour) {
		if (!place.geometry || !place.geometry.location) return;

		const circle = new google.maps.Circle({
			strokeColor: colour,
			strokeOpacity: 0.8,
			strokeWeight: 2,
			fillColor: colour,
			fillOpacity: 0.35,
			map,
			center: place.geometry.location,
			radius: 1000
		});

		google.maps.event.addListener(circle, "click", () => {
			infowindow.setContent(place.name || "");
			infowindow.open(map);
		});

		console.log("createCircle");
	}

	function createMarker(place) {
		if (!place.geometry || !place.geometry.location) return;

		const marker = new google.maps.Marker({
			map,
			position: place.geometry.location,
		});

		marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')

		google.maps.event.addListener(marker, "click", () => {
			infowindow.setContent(place.name || "");
			infowindow.open(map);
		});
	}
</script>